from dotenv import load_dotenv #stored credentials separate from this file
import os
import base64
from requests import post, get
import json

load_dotenv()

client_id = os.getenv('CLIENT_ID')
client_secret = os.getenv('CLIENT_SECRET')
#getting our api credentials (Justin's) from .env file under IT-490's DB folder
#print(client_id, client_secret) (will print credentials, optional for testing)

def get_token():
    auth_string = client_id + ":" + client_secret
    auth_bytes = auth_string.encode("utf-8")
    auth_base64 = str(base64.b64encode(auth_bytes), "utf-8")
    #Above encodes the token into base64

    url = "https://accounts.spotify.com/api/token"
    headers = {
        "Authorization": "Basic " + auth_base64,
        "Content-Type": "application/x-www-form-urlencoded"

    }
    data = {"grant_type": "client_credentials"}
    result = post(url, headers=headers, data=data)
    json_result = json.loads(result.content)
    token = json_result['access_token']
    return token

def get_auth_header(token):
    return {'Authorization': 'Bearer ' + token}

def search_for_artist(token, artist_name):
    url = 'https://api.spotify.com/v1/search' #spotify api search link
    headers = get_auth_header(token)          #authentication header with our token to access api url
    query = f"?q={artist_name}&type=artist&limit=1" #querying specifically only 1 artist --> change limit

    query_url = url + query
    result = get(query_url, headers=headers)
    json_result = json.loads(result.content)['artists']['items']# what will exist for json result
    if len(json_result) == 0:
        print("Invalid Artist Name. Please Try Again.") #if json result is 0 (no data returned) then no artist was found
        return None
    return json_result[0] #btw, json result will be returned as a python dictionary result
    #print(json_result) just for json-result, test command

def get_songs_from_artist(token, artist_id):
    url = f"https://api.spotify.com/v1/artists/{artist_id}/top-tracks?country=US"
    headers = get_auth_header(token)
    result = get(url, headers=headers)
    json_result = json.loads(result.content)['tracks']
    return json_result

def get_artists_from_artist(token, artist_id):
    url = f"https://api.spotify.com/v1/artists/{artist_id}/related-artists?country=US"
    headers = get_auth_header(token)
    result = get(url, headers=headers)
    json_result = json.loads(result.content)['artists']
    return json_result


token = get_token()

result = search_for_artist(token, 'The Strokes')
artist_id = result['id']
songs = get_songs_from_artist(token, artist_id)
relatedArtists = get_artists_from_artist(token, artist_id)

print("Artist Information")

print("Artist Name: " + str(result['name']))

print("Artist Popularity: " + str(result['popularity']))

print("Genres associated with this Artist: " + str(result['genres']))

print("Related Artists:")

for idx, relatedArtist in enumerate(relatedArtists): #list of all related artists
    print(f'{idx + 1}. {relatedArtist['name']}')

print("top ten songs:")
for idx, song in enumerate(songs):
    print(f'{idx + 1}. {song['name']}') #display index as a numbered list
#create functionality to add result into database table